//go:generate go install -v github.com/josephspurrier/goversioninfo/cmd/goversioninfo
//go:generate goversioninfo -icon=res/papp.ico -manifest=res/papp.manifest
package main

import (
	"os"
	"strings"

	"github.com/portapps/portapps/v3"
	"github.com/portapps/portapps/v3/pkg/log"
	"github.com/portapps/portapps/v3/pkg/utl"
)

var (
	app *portapps.App
)

const (
	vmOptionsFile = "pycharm64.exe.vmoptions"
)

func init() {
	var err error

	// Init app
	if app, err = portapps.New("pycharm-portable", "PyCharm"); err != nil {
		log.Fatal().Err(err).Msg("Cannot initialize application. See log file for more info.")
	}
}

func main() {
	pycharmExe := "pycharm64.exe"
	pycharmVmOptionsFile := "pycharm64.exe.vmoptions"

	utl.CreateFolder(app.DataPath)
	app.Process = utl.PathJoin(app.AppPath, "bin", pycharmExe)
	app.WorkingDir = utl.PathJoin(app.AppPath, "bin")

	// override idea.properties
	ideaPropContent := strings.Replace(`# DO NOT EDIT! AUTOMATICALLY GENERATED BY PORTAPPS.
idea.config.path={{ DATA_PATH }}/config
idea.system.path={{ DATA_PATH }}/system
idea.plugins.path={{ DATA_PATH }}/plugins
idea.log.path={{ DATA_PATH }}/log`, "{{ DATA_PATH }}", utl.FormatUnixPath(app.DataPath), -1)

	ideaPropPath := utl.PathJoin(app.DataPath, "idea.properties")
	if err := utl.CreateFile(ideaPropPath, ideaPropContent); err != nil {
		log.Fatal().Err(err).Msg("Cannot write idea.properties")
	}

	// https://www.jetbrains.com/help/pycharm/tuning-the-ide.html#configure-platform-properties
	os.Setenv("PYCHARM_PROPERTIES", ideaPropPath)

	// https://www.jetbrains.com/help/pycharm/tuning-the-ide.html#configure-jvm-options
	os.Setenv("PYCHARM_PROPERTIES", utl.PathJoin(app.DataPath, vmOptionsFile))
	if !utl.Exists(utl.PathJoin(app.DataPath, vmOptionsFile)) {
		utl.CopyFile(utl.PathJoin(app.AppPath, "bin", pycharmVmOptionsFile), utl.PathJoin(app.DataPath, vmOptionsFile))
	} else {
		utl.CopyFile(utl.PathJoin(app.DataPath, vmOptionsFile), utl.PathJoin(app.AppPath, "bin", pycharmVmOptionsFile))
	}

	defer app.Close()
	app.Launch(os.Args[1:])
}
